name: fdk-ruby
phoneBookId: functions
team: Functions
description: Ruby FDK
runnerTag: latest
version: 0 # Set by set_fdk_version and the setup_*_image steps, needs to be present here anyway
releaseBranches: ["master"]
triggerOnCommitBranches: ["pull-requests", "*"]

buildImageVersion: ""
runtimeImageVersion: ""
fdkVersion: ""

authCompartmentOcid: ocid1.compartment.oc1..aaaaaaaajnvcjjwfciaef2iaofrv5oq5yupxaivpzy7qrheify3lh42po27q
pipelineId: ocid1.devopsbuildpipeline.oc1.phx.amaaaaaaepf6idiayrrz7yr62m3jnsiukzbj4fnj72psliqcp45ljytdho5a

variables: {
    HTTP_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    HTTPS_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    NO_PROXY: "localhost,127.0.0.1,.us.oracle.com,.oraclecorp.com"
}

exportVariables {
    FDK_VERSION = "${set_fdk_version.fdk_version}"
}

steps: [
    ### Build FDK ###
    {
        name: set_fdk_version
        type: make
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        dotEnvFilePath: exportVariables.env
        artifacts: [
            "**"
        ]
    }
    {
        name: build_fdk
        type: make
        dependsOn: set_fdk_version
        runnerImage: build-runner-make-ol8
        environment: {
            VERSION: ${version}
            http_proxy: ${HTTP_PROXY}
            https_proxy: ${HTTPS_PROXY}
            no_proxy: ${NO_PROXY}
        }
        makeCommands: [
            { target: "build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }

    ### Ruby 3.1 images ###
    {
        name: setup_ruby3.1_build_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            RUBY_VERSION: "3.1"
            FDK_VERSION: ${version}
            VERSION_SUFFIX: "dev"
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: build_image_ruby3.1
        type: dockerizer
        dependsOn: setup_ruby3.1_build_image,
        dockerFile: "./internal/images/build-stage/3.1/Dockerfile"
        dockerBuildPwd: "./internal/images/build-stage/3.1"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_build_image_ruby3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_image_ruby3.1
        imageName: "fdk-ruby"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_build3.1
        type: make
        dependsOn: publish_build_image_ruby3.1
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: setup_ruby3.1_runtime_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            RUBY_VERSION: "3.1"
            FDK_VERSION: ${version}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: runtime_image_ruby3.1
        type: dockerizer
        dependsOn: setup_ruby3.1_runtime_image,
        dockerFile: "./internal/images/runtime/3.1/Dockerfile"
        dockerBuildPwd: "./internal/images/runtime/3.1"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_runtime_image_ruby3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: runtime_image_ruby3.1
        imageName: "fdk-ruby"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_runtime3.1
        type: make
        dependsOn: publish_runtime_image_ruby3.1
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: setup_test_image_build3.1
        type: make
        dependsOn: [build_fdk, fixup_version_build3.1, fixup_version_runtime3.1]
        environment: {
            RUBY_VERSION: "3.1"
        }
        makeCommands: [
            { target: "setup_test_image_build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_hello_world_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.1/hello-world-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.1/hello-world-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_hello_world_fn_3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_hello_world_fn_3.1
        imageName: "faas-hello-world-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_oci_sdk_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.1/oci-sdk-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.1/oci-sdk-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_oci_sdk_fn_3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_oci_sdk_fn_3.1
        imageName: "faas-oci-sdk-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_runtime_version_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.1/runtime-version-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.1/runtime-version-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_runtime_version_fn_3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_runtime_version_fn_3.1
        imageName: "faas-runtime-version-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_timeout_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.1/timeout-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.1/timeout-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_timeout_fn_3.1
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_timeout_fn_3.1
        imageName: "faas-timeout-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }

    ### Ruby 3.3 images ###
    {
        name: setup_ruby3.3_build_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            RUBY_VERSION: "3.3"
            FDK_VERSION: ${version}
            VERSION_SUFFIX: "dev"
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: build_image_ruby3.3
        type: dockerizer
        dependsOn: setup_ruby3.3_build_image,
        dockerFile: "./internal/images/build-stage/3.3/Dockerfile"
        dockerBuildPwd: "./internal/images/build-stage/3.3"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_build_image_ruby3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_image_ruby3.3
        imageName: "fdk-ruby"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_build3.3
        type: make
        dependsOn: publish_build_image_ruby3.3
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: setup_ruby3.3_runtime_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            RUBY_VERSION: "3.3"
            FDK_VERSION: ${version}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: runtime_image_ruby3.3
        type: dockerizer
        dependsOn: setup_ruby3.3_runtime_image,
        dockerFile: "./internal/images/runtime/3.3/Dockerfile"
        dockerBuildPwd: "./internal/images/runtime/3.3"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_runtime_image_ruby3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: runtime_image_ruby3.3
        imageName: "fdk-ruby"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_runtime3.3
        type: make
        dependsOn: publish_runtime_image_ruby3.3
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: setup_test_image_build3.3
        type: make
        dependsOn: [build_fdk, fixup_version_build3.3, fixup_version_runtime3.3]
        environment: {
            RUBY_VERSION: "3.3"
        }
        makeCommands: [
            { target: "setup_test_image_build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_hello_world_fn_3.3
        type: dockerizer
        dependsOn: setup_test_image_build3.3
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.3/hello-world-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.3/hello-world-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_hello_world_fn_3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_hello_world_fn_3.3
        imageName: "faas-hello-world-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_oci_sdk_fn_3.3
        type: dockerizer
        dependsOn: setup_test_image_build3.3
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.3/oci-sdk-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.3/oci-sdk-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_oci_sdk_fn_3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_oci_sdk_fn_3.3
        imageName: "faas-oci-sdk-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_runtime_version_fn_3.3
        type: dockerizer
        dependsOn: setup_test_image_build3.3
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.3/runtime-version-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.3/runtime-version-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_runtime_version_fn_3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_runtime_version_fn_3.3
        imageName: "faas-runtime-version-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
    {
        name: build_test_image_timeout_fn_3.3
        type: dockerizer
        dependsOn: setup_test_image_build3.3
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/tests-images/ruby3.3/timeout-test/Build_file.bs"
        dockerBuildPwd: "./internal/tests-images/ruby3.3/timeout-test"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    }
    {
        name: publish_test_image_timeout_fn_3.3
        type: publishdocker
        skipOnDryRun: false
        dependsOn: build_test_image_timeout_fn_3.3
        imageName: "faas-timeout-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    }
]